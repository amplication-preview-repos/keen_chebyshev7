/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, SiteCurrency as PrismaSiteCurrency } from "@prisma/client";

export class SiteCurrencyServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SiteCurrencyCountArgs, "select">
  ): Promise<number> {
    return this.prisma.siteCurrency.count(args);
  }

  async siteCurrencies(
    args: Prisma.SiteCurrencyFindManyArgs
  ): Promise<PrismaSiteCurrency[]> {
    return this.prisma.siteCurrency.findMany(args);
  }
  async siteCurrency(
    args: Prisma.SiteCurrencyFindUniqueArgs
  ): Promise<PrismaSiteCurrency | null> {
    return this.prisma.siteCurrency.findUnique(args);
  }
  async createSiteCurrency(
    args: Prisma.SiteCurrencyCreateArgs
  ): Promise<PrismaSiteCurrency> {
    return this.prisma.siteCurrency.create(args);
  }
  async updateSiteCurrency(
    args: Prisma.SiteCurrencyUpdateArgs
  ): Promise<PrismaSiteCurrency> {
    return this.prisma.siteCurrency.update(args);
  }
  async deleteSiteCurrency(
    args: Prisma.SiteCurrencyDeleteArgs
  ): Promise<PrismaSiteCurrency> {
    return this.prisma.siteCurrency.delete(args);
  }
}
