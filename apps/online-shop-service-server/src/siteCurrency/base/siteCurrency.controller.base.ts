/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SiteCurrencyService } from "../siteCurrency.service";
import { SiteCurrencyCreateInput } from "./SiteCurrencyCreateInput";
import { SiteCurrency } from "./SiteCurrency";
import { SiteCurrencyFindManyArgs } from "./SiteCurrencyFindManyArgs";
import { SiteCurrencyWhereUniqueInput } from "./SiteCurrencyWhereUniqueInput";
import { SiteCurrencyUpdateInput } from "./SiteCurrencyUpdateInput";

export class SiteCurrencyControllerBase {
  constructor(protected readonly service: SiteCurrencyService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SiteCurrency })
  async createSiteCurrency(
    @common.Body() data: SiteCurrencyCreateInput
  ): Promise<SiteCurrency> {
    return await this.service.createSiteCurrency({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SiteCurrency] })
  @ApiNestedQuery(SiteCurrencyFindManyArgs)
  async siteCurrencies(
    @common.Req() request: Request
  ): Promise<SiteCurrency[]> {
    const args = plainToClass(SiteCurrencyFindManyArgs, request.query);
    return this.service.siteCurrencies({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SiteCurrency })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async siteCurrency(
    @common.Param() params: SiteCurrencyWhereUniqueInput
  ): Promise<SiteCurrency | null> {
    const result = await this.service.siteCurrency({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SiteCurrency })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSiteCurrency(
    @common.Param() params: SiteCurrencyWhereUniqueInput,
    @common.Body() data: SiteCurrencyUpdateInput
  ): Promise<SiteCurrency | null> {
    try {
      return await this.service.updateSiteCurrency({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SiteCurrency })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSiteCurrency(
    @common.Param() params: SiteCurrencyWhereUniqueInput
  ): Promise<SiteCurrency | null> {
    try {
      return await this.service.deleteSiteCurrency({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
