/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PersonalAreaService } from "../personalArea.service";
import { PersonalAreaCreateInput } from "./PersonalAreaCreateInput";
import { PersonalArea } from "./PersonalArea";
import { PersonalAreaFindManyArgs } from "./PersonalAreaFindManyArgs";
import { PersonalAreaWhereUniqueInput } from "./PersonalAreaWhereUniqueInput";
import { PersonalAreaUpdateInput } from "./PersonalAreaUpdateInput";

export class PersonalAreaControllerBase {
  constructor(protected readonly service: PersonalAreaService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PersonalArea })
  async createPersonalArea(
    @common.Body() data: PersonalAreaCreateInput
  ): Promise<PersonalArea> {
    return await this.service.createPersonalArea({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PersonalArea] })
  @ApiNestedQuery(PersonalAreaFindManyArgs)
  async personalAreas(@common.Req() request: Request): Promise<PersonalArea[]> {
    const args = plainToClass(PersonalAreaFindManyArgs, request.query);
    return this.service.personalAreas({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PersonalArea })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async personalArea(
    @common.Param() params: PersonalAreaWhereUniqueInput
  ): Promise<PersonalArea | null> {
    const result = await this.service.personalArea({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PersonalArea })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePersonalArea(
    @common.Param() params: PersonalAreaWhereUniqueInput,
    @common.Body() data: PersonalAreaUpdateInput
  ): Promise<PersonalArea | null> {
    try {
      return await this.service.updatePersonalArea({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PersonalArea })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePersonalArea(
    @common.Param() params: PersonalAreaWhereUniqueInput
  ): Promise<PersonalArea | null> {
    try {
      return await this.service.deletePersonalArea({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
